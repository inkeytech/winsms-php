<?php
/**
 * MessageRecipientResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  winsms
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WinSMS
 *
 * WinSMS RESTful API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@winsms.co.za
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace winsms\Models;

use \ArrayAccess;
use \winsms\ObjectSerializer;

/**
 * MessageRecipientResponse Class Doc Comment
 *
 * @category Class
 * @package  winsms
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessageRecipientResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'messageRecipientResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clientMessageId' => 'string',
        'mobileNumber' => 'string',
        'accepted' => 'bool',
        'acceptError' => 'string',
        'apiMessageId' => 'int',
        'scheduledTime' => 'int',
        'creditCost' => 'double',
        'newCreditBalance' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clientMessageId' => null,
        'mobileNumber' => null,
        'accepted' => null,
        'acceptError' => null,
        'apiMessageId' => null,
        'scheduledTime' => null,
        'creditCost' => 'double',
        'newCreditBalance' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clientMessageId' => 'clientMessageId',
        'mobileNumber' => 'mobileNumber',
        'accepted' => 'accepted',
        'acceptError' => 'acceptError',
        'apiMessageId' => 'apiMessageId',
        'scheduledTime' => 'scheduledTime',
        'creditCost' => 'creditCost',
        'newCreditBalance' => 'newCreditBalance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clientMessageId' => 'setClientMessageId',
        'mobileNumber' => 'setMobileNumber',
        'accepted' => 'setAccepted',
        'acceptError' => 'setAcceptError',
        'apiMessageId' => 'setApiMessageId',
        'scheduledTime' => 'setScheduledTime',
        'creditCost' => 'setCreditCost',
        'newCreditBalance' => 'setNewCreditBalance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clientMessageId' => 'getClientMessageId',
        'mobileNumber' => 'getMobileNumber',
        'accepted' => 'getAccepted',
        'acceptError' => 'getAcceptError',
        'apiMessageId' => 'getApiMessageId',
        'scheduledTime' => 'getScheduledTime',
        'creditCost' => 'getCreditCost',
        'newCreditBalance' => 'getNewCreditBalance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clientMessageId'] = isset($data['clientMessageId']) ? $data['clientMessageId'] : null;
        $this->container['mobileNumber'] = isset($data['mobileNumber']) ? $data['mobileNumber'] : null;
        $this->container['accepted'] = isset($data['accepted']) ? $data['accepted'] : null;
        $this->container['acceptError'] = isset($data['acceptError']) ? $data['acceptError'] : null;
        $this->container['apiMessageId'] = isset($data['apiMessageId']) ? $data['apiMessageId'] : null;
        $this->container['scheduledTime'] = isset($data['scheduledTime']) ? $data['scheduledTime'] : null;
        $this->container['creditCost'] = isset($data['creditCost']) ? $data['creditCost'] : null;
        $this->container['newCreditBalance'] = isset($data['newCreditBalance']) ? $data['newCreditBalance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['clientMessageId'] === null) {
            $invalidProperties[] = "'clientMessageId' can't be null";
        }
        if ($this->container['mobileNumber'] === null) {
            $invalidProperties[] = "'mobileNumber' can't be null";
        }
        if ($this->container['accepted'] === null) {
            $invalidProperties[] = "'accepted' can't be null";
        }
        if ($this->container['acceptError'] === null) {
            $invalidProperties[] = "'acceptError' can't be null";
        }
        if ($this->container['apiMessageId'] === null) {
            $invalidProperties[] = "'apiMessageId' can't be null";
        }
        if ($this->container['scheduledTime'] === null) {
            $invalidProperties[] = "'scheduledTime' can't be null";
        }
        if ($this->container['creditCost'] === null) {
            $invalidProperties[] = "'creditCost' can't be null";
        }
        if ($this->container['newCreditBalance'] === null) {
            $invalidProperties[] = "'newCreditBalance' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clientMessageId
     *
     * @return string
     */
    public function getClientMessageId()
    {
        return $this->container['clientMessageId'];
    }

    /**
     * Sets clientMessageId
     *
     * @param string $clientMessageId If the optional ***clientMessageId*** value was specified in the recipient object for the recipient, it will be returned here. If not, ***clientMessageId*** will be **null**.
     *
     * @return $this
     */
    public function setClientMessageId($clientMessageId)
    {
        $this->container['clientMessageId'] = $clientMessageId;

        return $this;
    }

    /**
     * Gets mobileNumber
     *
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobileNumber'];
    }

    /**
     * Sets mobileNumber
     *
     * @param string $mobileNumber The mobile number specified as the ***mobileNumber*** value of the recipient object of the request.
     *
     * @return $this
     */
    public function setMobileNumber($mobileNumber)
    {
        $this->container['mobileNumber'] = $mobileNumber;

        return $this;
    }

    /**
     * Gets accepted
     *
     * @return bool
     */
    public function getAccepted()
    {
        return $this->container['accepted'];
    }

    /**
     * Sets accepted
     *
     * @param bool $accepted A boolean value indicating whether the API accepted the recipient for SMS delivery. This will be **false** If you have insufficient credits or the recipient mobile number supplied is not valid.
     *
     * @return $this
     */
    public function setAccepted($accepted)
    {
        $this->container['accepted'] = $accepted;

        return $this;
    }

    /**
     * Gets acceptError
     *
     * @return string
     */
    public function getAcceptError()
    {
        return $this->container['acceptError'];
    }

    /**
     * Sets acceptError
     *
     * @param string $acceptError If the ***accepted*** value is **false**, this will contain the reason that delivery to the recipient was declined by the API. If the recipient was accepted, this value will be blank.
     *
     * @return $this
     */
    public function setAcceptError($acceptError)
    {
        $this->container['acceptError'] = $acceptError;

        return $this;
    }

    /**
     * Gets apiMessageId
     *
     * @return int
     */
    public function getApiMessageId()
    {
        return $this->container['apiMessageId'];
    }

    /**
     * Sets apiMessageId
     *
     * @param int $apiMessageId The WinSMS Message Id assigned to the specific message recipient. This Id can be used to obtain the status of the message, and to delete the message if it was scheduled. If the API did not accept the recipient for delivery, the value will be **null**.
     *
     * @return $this
     */
    public function setApiMessageId($apiMessageId)
    {
        $this->container['apiMessageId'] = $apiMessageId;

        return $this;
    }

    /**
     * Gets scheduledTime
     *
     * @return int
     */
    public function getScheduledTime()
    {
        return $this->container['scheduledTime'];
    }

    /**
     * Sets scheduledTime
     *
     * @param int $scheduledTime The date and time that the message was scheduled for delivery to the recipient.  If no ***scheduledTime*** value was specified in the request, or the recipient was not accepted for delivery, this value will be **null**.
     *
     * @return $this
     */
    public function setScheduledTime($scheduledTime)
    {
        $this->container['scheduledTime'] = $scheduledTime;

        return $this;
    }

    /**
     * Gets creditCost
     *
     * @return double
     */
    public function getCreditCost()
    {
        return $this->container['creditCost'];
    }

    /**
     * Sets creditCost
     *
     * @param double $creditCost The number of credits deducted from your account for the SMS to this recipient.  The credit cost is based on the destination country of the recipient and the length (number of segments) of the message.  This credit cost will be reimbursed if the message is scheduled and subsequently deleted.  If the recipient is not accepted for delivery, the ***creditCost*** value will be **null**.
     *
     * @return $this
     */
    public function setCreditCost($creditCost)
    {
        $this->container['creditCost'] = $creditCost;

        return $this;
    }

    /**
     * Gets newCreditBalance
     *
     * @return double
     */
    public function getNewCreditBalance()
    {
        return $this->container['newCreditBalance'];
    }

    /**
     * Sets newCreditBalance
     *
     * @param double $newCreditBalance The number of WinSMS credits remaining in your account after processing this recipient.
     *
     * @return $this
     */
    public function setNewCreditBalance($newCreditBalance)
    {
        $this->container['newCreditBalance'] = $newCreditBalance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


